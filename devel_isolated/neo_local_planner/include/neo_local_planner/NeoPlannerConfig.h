//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the neo_local_planner package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __neo_local_planner__NEOPLANNERCONFIG_H__
#define __neo_local_planner__NEOPLANNERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace neo_local_planner
{
  class NeoPlannerConfigStatics;

  class NeoPlannerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(NeoPlannerConfig &config, const NeoPlannerConfig &max, const NeoPlannerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const NeoPlannerConfig &config1, const NeoPlannerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, NeoPlannerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const NeoPlannerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, NeoPlannerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const NeoPlannerConfig &config) const = 0;
      virtual void getValue(const NeoPlannerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T NeoPlannerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T NeoPlannerConfig::* field;

      virtual void clamp(NeoPlannerConfig &config, const NeoPlannerConfig &max, const NeoPlannerConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const NeoPlannerConfig &config1, const NeoPlannerConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, NeoPlannerConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const NeoPlannerConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, NeoPlannerConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const NeoPlannerConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const NeoPlannerConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, NeoPlannerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, NeoPlannerConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<NeoPlannerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(NeoPlannerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("acc_lim_x"==(*_i)->name){acc_lim_x = boost::any_cast<double>(val);}
        if("acc_lim_theta"==(*_i)->name){acc_lim_theta = boost::any_cast<double>(val);}
        if("max_vel_x"==(*_i)->name){max_vel_x = boost::any_cast<double>(val);}
        if("min_vel_x"==(*_i)->name){min_vel_x = boost::any_cast<double>(val);}
        if("max_rot_vel"==(*_i)->name){max_rot_vel = boost::any_cast<double>(val);}
        if("min_rot_vel"==(*_i)->name){min_rot_vel = boost::any_cast<double>(val);}
        if("max_vel_trans"==(*_i)->name){max_vel_trans = boost::any_cast<double>(val);}
        if("min_vel_trans"==(*_i)->name){min_vel_trans = boost::any_cast<double>(val);}
        if("rot_stopped_vel"==(*_i)->name){rot_stopped_vel = boost::any_cast<double>(val);}
        if("trans_stopped_vel"==(*_i)->name){trans_stopped_vel = boost::any_cast<double>(val);}
        if("yaw_goal_tolerance"==(*_i)->name){yaw_goal_tolerance = boost::any_cast<double>(val);}
        if("xy_goal_tolerance"==(*_i)->name){xy_goal_tolerance = boost::any_cast<double>(val);}
        if("differential_drive"==(*_i)->name){differential_drive = boost::any_cast<bool>(val);}
        if("constrain_final"==(*_i)->name){constrain_final = boost::any_cast<bool>(val);}
        if("goal_tune_time"==(*_i)->name){goal_tune_time = boost::any_cast<double>(val);}
        if("lookahead_time"==(*_i)->name){lookahead_time = boost::any_cast<double>(val);}
        if("lookahead_dist"==(*_i)->name){lookahead_dist = boost::any_cast<double>(val);}
        if("start_yaw_error_normal"==(*_i)->name){start_yaw_error_normal = boost::any_cast<double>(val);}
        if("start_yaw_error_when_safety"==(*_i)->name){start_yaw_error_when_safety = boost::any_cast<double>(val);}
        if("pos_x_gain"==(*_i)->name){pos_x_gain = boost::any_cast<double>(val);}
        if("pos_y_gain"==(*_i)->name){pos_y_gain = boost::any_cast<double>(val);}
        if("pos_y_yaw_gain"==(*_i)->name){pos_y_yaw_gain = boost::any_cast<double>(val);}
        if("yaw_gain"==(*_i)->name){yaw_gain = boost::any_cast<double>(val);}
        if("static_yaw_gain"==(*_i)->name){static_yaw_gain = boost::any_cast<double>(val);}
        if("cost_x_gain"==(*_i)->name){cost_x_gain = boost::any_cast<double>(val);}
        if("cost_y_gain"==(*_i)->name){cost_y_gain = boost::any_cast<double>(val);}
        if("cost_y_yaw_gain"==(*_i)->name){cost_y_yaw_gain = boost::any_cast<double>(val);}
        if("cost_y_lookahead_dist"==(*_i)->name){cost_y_lookahead_dist = boost::any_cast<double>(val);}
        if("cost_y_lookahead_time"==(*_i)->name){cost_y_lookahead_time = boost::any_cast<double>(val);}
        if("cost_yaw_gain"==(*_i)->name){cost_yaw_gain = boost::any_cast<double>(val);}
        if("low_pass_gain"==(*_i)->name){low_pass_gain = boost::any_cast<double>(val);}
        if("max_cost"==(*_i)->name){max_cost = boost::any_cast<double>(val);}
        if("max_curve_vel"==(*_i)->name){max_curve_vel = boost::any_cast<double>(val);}
        if("max_goal_dist"==(*_i)->name){max_goal_dist = boost::any_cast<double>(val);}
        if("max_backup_dist"==(*_i)->name){max_backup_dist = boost::any_cast<double>(val);}
        if("min_stop_dist"==(*_i)->name){min_stop_dist = boost::any_cast<double>(val);}
        if("emergency_acc_lim_x"==(*_i)->name){emergency_acc_lim_x = boost::any_cast<double>(val);}
        if("enable_software_stop"==(*_i)->name){enable_software_stop = boost::any_cast<bool>(val);}
        if("allow_reversing"==(*_i)->name){allow_reversing = boost::any_cast<bool>(val);}
        if("vel_max_safety_field_0"==(*_i)->name){vel_max_safety_field_0 = boost::any_cast<double>(val);}
        if("vel_max_safety_field_1"==(*_i)->name){vel_max_safety_field_1 = boost::any_cast<double>(val);}
        if("vel_max_safety_field_2"==(*_i)->name){vel_max_safety_field_2 = boost::any_cast<double>(val);}
        if("vel_max_safety_field_3"==(*_i)->name){vel_max_safety_field_3 = boost::any_cast<double>(val);}
        if("max_time_check_stop_by_safety"==(*_i)->name){max_time_check_stop_by_safety = boost::any_cast<double>(val);}
        if("print_state"==(*_i)->name){print_state = boost::any_cast<bool>(val);}
      }
    }

    double acc_lim_x;
double acc_lim_theta;
double max_vel_x;
double min_vel_x;
double max_rot_vel;
double min_rot_vel;
double max_vel_trans;
double min_vel_trans;
double rot_stopped_vel;
double trans_stopped_vel;
double yaw_goal_tolerance;
double xy_goal_tolerance;
bool differential_drive;
bool constrain_final;
double goal_tune_time;
double lookahead_time;
double lookahead_dist;
double start_yaw_error_normal;
double start_yaw_error_when_safety;
double pos_x_gain;
double pos_y_gain;
double pos_y_yaw_gain;
double yaw_gain;
double static_yaw_gain;
double cost_x_gain;
double cost_y_gain;
double cost_y_yaw_gain;
double cost_y_lookahead_dist;
double cost_y_lookahead_time;
double cost_yaw_gain;
double low_pass_gain;
double max_cost;
double max_curve_vel;
double max_goal_dist;
double max_backup_dist;
double min_stop_dist;
double emergency_acc_lim_x;
bool enable_software_stop;
bool allow_reversing;
double vel_max_safety_field_0;
double vel_max_safety_field_1;
double vel_max_safety_field_2;
double vel_max_safety_field_3;
double max_time_check_stop_by_safety;
bool print_state;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_theta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_rot_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_rot_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_trans;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_trans;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double rot_stopped_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double trans_stopped_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yaw_goal_tolerance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double xy_goal_tolerance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool differential_drive;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool constrain_final;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double goal_tune_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lookahead_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lookahead_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double start_yaw_error_normal;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double start_yaw_error_when_safety;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pos_x_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pos_y_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pos_y_yaw_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yaw_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double static_yaw_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_x_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_y_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_y_yaw_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_y_lookahead_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_y_lookahead_time;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cost_yaw_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double low_pass_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_cost;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_curve_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_goal_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_backup_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_stop_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double emergency_acc_lim_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable_software_stop;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool allow_reversing;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vel_max_safety_field_0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vel_max_safety_field_1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vel_max_safety_field_2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vel_max_safety_field_3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_time_check_stop_by_safety;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool print_state;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("NeoPlannerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const NeoPlannerConfig &__max__ = __getMax__();
      const NeoPlannerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const NeoPlannerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const NeoPlannerConfig &__getDefault__();
    static const NeoPlannerConfig &__getMax__();
    static const NeoPlannerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const NeoPlannerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void NeoPlannerConfig::ParamDescription<std::string>::clamp(NeoPlannerConfig &config, const NeoPlannerConfig &max, const NeoPlannerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class NeoPlannerConfigStatics
  {
    friend class NeoPlannerConfig;

    NeoPlannerConfigStatics()
    {
NeoPlannerConfig::GroupDescription<NeoPlannerConfig::DEFAULT, NeoPlannerConfig> Default("Default", "", 0, 0, true, &NeoPlannerConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_x = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_x = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_x = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("acc_lim_x", "double", 0, "The acceleration limit of the robot in the x direction", "", &NeoPlannerConfig::acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("acc_lim_x", "double", 0, "The acceleration limit of the robot in the x direction", "", &NeoPlannerConfig::acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_theta = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_theta = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_theta = 1.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "The acceleration limit of the robot in the theta direction", "", &NeoPlannerConfig::acc_lim_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "The acceleration limit of the robot in the theta direction", "", &NeoPlannerConfig::acc_lim_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_x = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_x = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_x = 1.2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_vel_x", "double", 0, "The maximum x velocity for the robot in m/s", "", &NeoPlannerConfig::max_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_vel_x", "double", 0, "The maximum x velocity for the robot in m/s", "", &NeoPlannerConfig::max_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_x = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_x = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_x = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_vel_x", "double", 0, "The minimum x velocity for the robot in m/s", "", &NeoPlannerConfig::min_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_vel_x", "double", 0, "The minimum x velocity for the robot in m/s", "", &NeoPlannerConfig::min_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_rot_vel = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_rot_vel = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_rot_vel = 0.7;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_rot_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::max_rot_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_rot_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::max_rot_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_rot_vel = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_rot_vel = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_rot_vel = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_rot_vel", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::min_rot_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_rot_vel", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::min_rot_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_trans = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_trans = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_trans = 1.2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_vel_trans", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::max_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_vel_trans", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::max_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_trans = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_trans = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_trans = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_vel_trans", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::min_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_vel_trans", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::min_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.rot_stopped_vel = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.rot_stopped_vel = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.rot_stopped_vel = 0.05;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("rot_stopped_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::rot_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("rot_stopped_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::rot_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trans_stopped_vel = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trans_stopped_vel = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trans_stopped_vel = 0.05;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("trans_stopped_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::trans_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("trans_stopped_vel", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::trans_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_goal_tolerance = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_goal_tolerance = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_goal_tolerance = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "The tolerance in radians for the controller in yaw/rotation when achieving its goal", "", &NeoPlannerConfig::yaw_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "The tolerance in radians for the controller in yaw/rotation when achieving its goal", "", &NeoPlannerConfig::yaw_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.xy_goal_tolerance = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.xy_goal_tolerance = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.xy_goal_tolerance = 0.05;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "The tolerance in meters for the controller in the x & y distance when achieving a goal", "", &NeoPlannerConfig::xy_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "The tolerance in meters for the controller in the x & y distance when achieving a goal", "", &NeoPlannerConfig::xy_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.differential_drive = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.differential_drive = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.differential_drive = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("differential_drive", "bool", 0, "If robot has differential drive, holonomic otherwise", "", &NeoPlannerConfig::differential_drive)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("differential_drive", "bool", 0, "If robot has differential drive, holonomic otherwise", "", &NeoPlannerConfig::differential_drive)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.constrain_final = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.constrain_final = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.constrain_final = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("constrain_final", "bool", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::constrain_final)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("constrain_final", "bool", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &NeoPlannerConfig::constrain_final)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.goal_tune_time = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.goal_tune_time = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.goal_tune_time = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("goal_tune_time", "double", 0, "How long to fine tune for goal position after reaching tolerance limits [s]", "", &NeoPlannerConfig::goal_tune_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("goal_tune_time", "double", 0, "How long to fine tune for goal position after reaching tolerance limits [s]", "", &NeoPlannerConfig::goal_tune_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lookahead_time = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lookahead_time = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lookahead_time = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("lookahead_time", "double", 0, "How far to predict control pose into the future based on latest odometry [s]", "", &NeoPlannerConfig::lookahead_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("lookahead_time", "double", 0, "How far to predict control pose into the future based on latest odometry [s]", "", &NeoPlannerConfig::lookahead_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lookahead_dist = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lookahead_dist = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lookahead_dist = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("lookahead_dist", "double", 0, "How far to look ahead when computing path orientation [m]", "", &NeoPlannerConfig::lookahead_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("lookahead_dist", "double", 0, "How far to look ahead when computing path orientation [m]", "", &NeoPlannerConfig::lookahead_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.start_yaw_error_normal = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.start_yaw_error_normal = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.start_yaw_error_normal = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("start_yaw_error_normal", "double", 0, "Threshold yaw error below which we consider to start moving [rad]", "", &NeoPlannerConfig::start_yaw_error_normal)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("start_yaw_error_normal", "double", 0, "Threshold yaw error below which we consider to start moving [rad]", "", &NeoPlannerConfig::start_yaw_error_normal)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.start_yaw_error_when_safety = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.start_yaw_error_when_safety = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.start_yaw_error_when_safety = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("start_yaw_error_when_safety", "double", 0, "Threshold yaw error below which we consider to start moving if have safety [rad]", "", &NeoPlannerConfig::start_yaw_error_when_safety)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("start_yaw_error_when_safety", "double", 0, "Threshold yaw error below which we consider to start moving if have safety [rad]", "", &NeoPlannerConfig::start_yaw_error_when_safety)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pos_x_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pos_x_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pos_x_gain = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_x_gain", "double", 0, "Gain when adjusting final x position for goal [1/s]", "", &NeoPlannerConfig::pos_x_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_x_gain", "double", 0, "Gain when adjusting final x position for goal [1/s]", "", &NeoPlannerConfig::pos_x_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pos_y_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pos_y_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pos_y_gain = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_y_gain", "double", 0, "Gain for lane keeping based on y error (differential only) [rad/s^2]", "", &NeoPlannerConfig::pos_y_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_y_gain", "double", 0, "Gain for lane keeping based on y error (differential only) [rad/s^2]", "", &NeoPlannerConfig::pos_y_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pos_y_yaw_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pos_y_yaw_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pos_y_yaw_gain = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_y_yaw_gain", "double", 0, "Gain for lane keeping based on y error (differential only) [rad/s^2]", "", &NeoPlannerConfig::pos_y_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("pos_y_yaw_gain", "double", 0, "Gain for lane keeping based on y error (differential only) [rad/s^2]", "", &NeoPlannerConfig::pos_y_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_gain = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("yaw_gain", "double", 0, "Gain for lane keeping based on yaw error (differential only) [1/s]", "", &NeoPlannerConfig::yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("yaw_gain", "double", 0, "Gain for lane keeping based on yaw error (differential only) [1/s]", "", &NeoPlannerConfig::yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.static_yaw_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.static_yaw_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.static_yaw_gain = 3.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("static_yaw_gain", "double", 0, "Gain for adjusting yaw when not translating, or in case of holonomic drive [1/s]", "", &NeoPlannerConfig::static_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("static_yaw_gain", "double", 0, "Gain for adjusting yaw when not translating, or in case of holonomic drive [1/s]", "", &NeoPlannerConfig::static_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_x_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_x_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_x_gain = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_x_gain", "double", 0, "Gain for x cost avoidance", "", &NeoPlannerConfig::cost_x_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_x_gain", "double", 0, "Gain for x cost avoidance", "", &NeoPlannerConfig::cost_x_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_y_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_y_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_y_gain = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_gain", "double", 0, "TGain for y cost avoidance", "", &NeoPlannerConfig::cost_y_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_gain", "double", 0, "TGain for y cost avoidance", "", &NeoPlannerConfig::cost_y_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_y_yaw_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_y_yaw_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_y_yaw_gain = 0.2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_yaw_gain", "double", 0, "Gain for y cost avoidance (differential only)", "", &NeoPlannerConfig::cost_y_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_yaw_gain", "double", 0, "Gain for y cost avoidance (differential only)", "", &NeoPlannerConfig::cost_y_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_y_lookahead_dist = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_y_lookahead_dist = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_y_lookahead_dist = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_lookahead_dist", "double", 0, "The number of samples to use when exploring the theta velocity space", "", &NeoPlannerConfig::cost_y_lookahead_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_lookahead_dist", "double", 0, "The number of samples to use when exploring the theta velocity space", "", &NeoPlannerConfig::cost_y_lookahead_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_y_lookahead_time = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_y_lookahead_time = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_y_lookahead_time = 1.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_lookahead_time", "double", 0, "How far ahead to compute y cost gradient (dynamic offset) [s]", "", &NeoPlannerConfig::cost_y_lookahead_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_y_lookahead_time", "double", 0, "How far ahead to compute y cost gradient (dynamic offset) [s]", "", &NeoPlannerConfig::cost_y_lookahead_time)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cost_yaw_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cost_yaw_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cost_yaw_gain = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_yaw_gain", "double", 0, "Gain for yaw cost avoidance", "", &NeoPlannerConfig::cost_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("cost_yaw_gain", "double", 0, "Gain for yaw cost avoidance", "", &NeoPlannerConfig::cost_yaw_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.low_pass_gain = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.low_pass_gain = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.low_pass_gain = 0.2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("low_pass_gain", "double", 0, "Gain for final control low pass filter", "", &NeoPlannerConfig::low_pass_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("low_pass_gain", "double", 0, "Gain for final control low pass filter", "", &NeoPlannerConfig::low_pass_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_cost = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_cost = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_cost = 0.95;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_cost", "double", 0, "Max cost to allow, above we slow down to min_trans_vel or even stop", "", &NeoPlannerConfig::max_cost)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_cost", "double", 0, "Max cost to allow, above we slow down to min_trans_vel or even stop", "", &NeoPlannerConfig::max_cost)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_curve_vel = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_curve_vel = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_curve_vel = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_curve_vel", "double", 0, "Max velocity based on curvature [rad/s]", "", &NeoPlannerConfig::max_curve_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_curve_vel", "double", 0, "Max velocity based on curvature [rad/s]", "", &NeoPlannerConfig::max_curve_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_goal_dist = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_goal_dist = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_goal_dist = 0.6;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_goal_dist", "double", 0, "Max distance to goal when looking for it [m]", "", &NeoPlannerConfig::max_goal_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_goal_dist", "double", 0, "Max distance to goal when looking for it [m]", "", &NeoPlannerConfig::max_goal_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_backup_dist = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_backup_dist = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_backup_dist = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_backup_dist", "double", 0, "Max distance allowable for backing up (zero = unlimited) [m]", "", &NeoPlannerConfig::max_backup_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_backup_dist", "double", 0, "Max distance allowable for backing up (zero = unlimited) [m]", "", &NeoPlannerConfig::max_backup_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_stop_dist = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_stop_dist = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_stop_dist = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_stop_dist", "double", 0, "Minimal distance to obstacle for stopping [m]", "", &NeoPlannerConfig::min_stop_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("min_stop_dist", "double", 0, "Minimal distance to obstacle for stopping [m]", "", &NeoPlannerConfig::min_stop_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.emergency_acc_lim_x = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.emergency_acc_lim_x = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.emergency_acc_lim_x = 1.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("emergency_acc_lim_x", "double", 0, "Acc when emgergency", "", &NeoPlannerConfig::emergency_acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("emergency_acc_lim_x", "double", 0, "Acc when emgergency", "", &NeoPlannerConfig::emergency_acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_software_stop = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_software_stop = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_software_stop = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("enable_software_stop", "bool", 0, "Footprint based collision avoidance", "", &NeoPlannerConfig::enable_software_stop)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("enable_software_stop", "bool", 0, "Footprint based collision avoidance", "", &NeoPlannerConfig::enable_software_stop)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.allow_reversing = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.allow_reversing = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.allow_reversing = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("allow_reversing", "bool", 0, "Robot with safety sensors in the rear can be set to reverse", "", &NeoPlannerConfig::allow_reversing)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("allow_reversing", "bool", 0, "Robot with safety sensors in the rear can be set to reverse", "", &NeoPlannerConfig::allow_reversing)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_max_safety_field_0 = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_max_safety_field_0 = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_max_safety_field_0 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_0", "double", 0, "Vel max in safety field 0", "", &NeoPlannerConfig::vel_max_safety_field_0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_0", "double", 0, "Vel max in safety field 0", "", &NeoPlannerConfig::vel_max_safety_field_0)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_max_safety_field_1 = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_max_safety_field_1 = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_max_safety_field_1 = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_1", "double", 0, "Vel max in safety field 1", "", &NeoPlannerConfig::vel_max_safety_field_1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_1", "double", 0, "Vel max in safety field 1", "", &NeoPlannerConfig::vel_max_safety_field_1)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_max_safety_field_2 = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_max_safety_field_2 = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_max_safety_field_2 = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_2", "double", 0, "Vel max in safety field 2", "", &NeoPlannerConfig::vel_max_safety_field_2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_2", "double", 0, "Vel max in safety field 2", "", &NeoPlannerConfig::vel_max_safety_field_2)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vel_max_safety_field_3 = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vel_max_safety_field_3 = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vel_max_safety_field_3 = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_3", "double", 0, "Vel max in safety field 3", "", &NeoPlannerConfig::vel_max_safety_field_3)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("vel_max_safety_field_3", "double", 0, "Vel max in safety field 3", "", &NeoPlannerConfig::vel_max_safety_field_3)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_time_check_stop_by_safety = -20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_time_check_stop_by_safety = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_time_check_stop_by_safety = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_time_check_stop_by_safety", "double", 0, "Time delay after get safety", "", &NeoPlannerConfig::max_time_check_stop_by_safety)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<double>("max_time_check_stop_by_safety", "double", 0, "Time delay after get safety", "", &NeoPlannerConfig::max_time_check_stop_by_safety)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.print_state = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.print_state = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.print_state = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("print_state", "bool", 0, "Print current state or not", "", &NeoPlannerConfig::print_state)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(NeoPlannerConfig::AbstractParamDescriptionConstPtr(new NeoPlannerConfig::ParamDescription<bool>("print_state", "bool", 0, "Print current state or not", "", &NeoPlannerConfig::print_state)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(NeoPlannerConfig::AbstractGroupDescriptionConstPtr(new NeoPlannerConfig::GroupDescription<NeoPlannerConfig::DEFAULT, NeoPlannerConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<NeoPlannerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<NeoPlannerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<NeoPlannerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    NeoPlannerConfig __max__;
    NeoPlannerConfig __min__;
    NeoPlannerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const NeoPlannerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static NeoPlannerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &NeoPlannerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const NeoPlannerConfig &NeoPlannerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const NeoPlannerConfig &NeoPlannerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const NeoPlannerConfig &NeoPlannerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<NeoPlannerConfig::AbstractParamDescriptionConstPtr> &NeoPlannerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<NeoPlannerConfig::AbstractGroupDescriptionConstPtr> &NeoPlannerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const NeoPlannerConfigStatics *NeoPlannerConfig::__get_statics__()
  {
    const static NeoPlannerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = NeoPlannerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __NEOPLANNERRECONFIGURATOR_H__
