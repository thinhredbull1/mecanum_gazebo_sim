// Generated by gencpp from file scan_safety/SafetyEnableRequest.msg
// DO NOT EDIT!


#ifndef SCAN_SAFETY_MESSAGE_SAFETYENABLEREQUEST_H
#define SCAN_SAFETY_MESSAGE_SAFETYENABLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scan_safety
{
template <class ContainerAllocator>
struct SafetyEnableRequest_
{
  typedef SafetyEnableRequest_<ContainerAllocator> Type;

  SafetyEnableRequest_()
    : enable_safety(false)  {
    }
  SafetyEnableRequest_(const ContainerAllocator& _alloc)
    : enable_safety(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_safety_type;
  _enable_safety_type enable_safety;





  typedef boost::shared_ptr< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyEnableRequest_

typedef ::scan_safety::SafetyEnableRequest_<std::allocator<void> > SafetyEnableRequest;

typedef boost::shared_ptr< ::scan_safety::SafetyEnableRequest > SafetyEnableRequestPtr;
typedef boost::shared_ptr< ::scan_safety::SafetyEnableRequest const> SafetyEnableRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scan_safety::SafetyEnableRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scan_safety::SafetyEnableRequest_<ContainerAllocator1> & lhs, const ::scan_safety::SafetyEnableRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable_safety == rhs.enable_safety;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scan_safety::SafetyEnableRequest_<ContainerAllocator1> & lhs, const ::scan_safety::SafetyEnableRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scan_safety

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff906b73944101bb5b1e4ddfcc11941f";
  }

  static const char* value(const ::scan_safety::SafetyEnableRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff906b73944101bbULL;
  static const uint64_t static_value2 = 0x5b1e4ddfcc11941fULL;
};

template<class ContainerAllocator>
struct DataType< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scan_safety/SafetyEnableRequest";
  }

  static const char* value(const ::scan_safety::SafetyEnableRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool enable_safety   # Request to enable/disable safety\n"
;
  }

  static const char* value(const ::scan_safety::SafetyEnableRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_safety);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyEnableRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scan_safety::SafetyEnableRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scan_safety::SafetyEnableRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable_safety: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_safety);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCAN_SAFETY_MESSAGE_SAFETYENABLEREQUEST_H
